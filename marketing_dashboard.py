# -*- coding: utf-8 -*-
"""marketing_dashboard.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/197ePsUvp_miI3HuHdNkuQXU5UYV2lv_p
"""

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_excel('dataset.xlsx')

# Streamlit header
st.title("Marketing Campaign Analysis Dashboard")

# Campaign Metrics Calculation
# Ensure numeric columns for calculations
data['Conversions'] = pd.to_numeric(data['Conversions'], errors='coerce')
data['Clicks'] = pd.to_numeric(data['Clicks'], errors='coerce')
data['Total_Spend'] = pd.to_numeric(data['Total_Spend'], errors='coerce')
data['Revenue_Generated'] = pd.to_numeric(data['Revenue_Generated'], errors='coerce')

# Calculate metrics
data['Conversion_Rate'] = (data['Conversions'] / data['Clicks']) * 100
data['CPC'] = data['Total_Spend'] / data['Clicks']
data['CPA'] = data['Total_Spend'] / data['Conversions']
data['ROAS'] = data['Revenue_Generated'] / data['Total_Spend']

# KPI Summary
st.header("Key Performance Indicators (KPIs)")
kpis = {
    'Total Impressions': data['Impressions'].sum(),
    'Total Clicks': data['Clicks'].sum(),
    'Total Conversions': data['Conversions'].sum(),
    'Total Spend': data['Total_Spend'].sum(),
    'Total Revenue': data['Revenue_Generated'].sum(),
    'Average CTR': (data['Clicks'].sum() / data['Impressions'].sum()) * 100,
    'Overall ROAS': data['Revenue_Generated'].sum() / data['Total_Spend'].sum()
}
st.write(kpis)

# Ensure numeric columns for aggregation
numeric_columns = ['Conversion_Rate', 'CPC', 'CPA', 'ROAS', 'Total_Spend', 'Revenue_Generated']
data[numeric_columns] = data[numeric_columns].apply(pd.to_numeric, errors='coerce')

# Visualization of Channel Comparison
st.header("Conversion Rate by Marketing Channel")
channel_metrics = data.groupby('Marketing_Channel')[numeric_columns].mean().reset_index()

fig, ax = plt.subplots()
sns.barplot(data=channel_metrics, x='Marketing_Channel', y='Conversion_Rate', ax=ax)
st.pyplot(fig)

# Monthly Trends Line Plot
st.header("Monthly Trends in Campaign Performance")
data['End_Date'] = pd.to_datetime(data['End_Date'], errors='coerce')  # Ensure date column is datetime
data['Month_Year'] = data['End_Date'].dt.to_period("M").astype(str)  # Extract year-month period
time_metrics = data.groupby('Month_Year').agg({
    'Impressions': 'sum',
    'Clicks': 'sum',
    'Conversions': 'sum',
    'Total_Spend': 'sum',
    'Revenue_Generated': 'sum'
}).reset_index()

# Plotting the trends
fig, ax = plt.subplots(figsize=(10, 6))
sns.lineplot(data=time_metrics, x='Month_Year', y='Impressions', label='Impressions', marker='o')
sns.lineplot(data=time_metrics, x='Month_Year', y='Clicks', label='Clicks', marker='o')
sns.lineplot(data=time_metrics, x='Month_Year', y='Conversions', label='Conversions', marker='o')
st.pyplot(fig)

# Spend Distribution Pie Chart
st.header("Spend Distribution by Marketing Channel")
fig, ax = plt.subplots()
ax.pie(channel_metrics['Total_Spend'], labels=channel_metrics['Marketing_Channel'], autopct='%1.1f%%')
st.pyplot(fig)

